using namespace std;
 
typedef long long LT;
 
const int mod = 1000000007;
 
const int MM = 100000;
const int Z = MM + 5;
 
int med[Z], alz[Z], a[Z], ms[Z][32], lt[Z];
 
inline int addd(int a, int b) {
    if ((a+=b) >= mod) return a-mod;
    else return a;
}
 
inline int subt(int a, int b) {
    if ((a-=b) < 0) return a+mod;
    else return a;
}
 
inline int multi(int a, int b) {
    return LT(a) * b % mod;
}
 
int powers(int a, int b) {
    int s = 1;
    while (b) {
        if (b & 1) s = multi(s, a);
        a = multi(a, a);
        b >>= 1;
    }
    return s;
}
 
void solution(int mn) {
    int x;
    scanf("%d", &x);
    
    for (int i = 1; i <= x; i++) {
        scanf("%d", a+i);
        alz[a[i]]++;
    }
 
    int ans = 1;
 
    for (int i = MM; i >= 1; i--) {
        med[i] = 0;
        int e = alz[i];
        for (int j = i+i; j <= MM; j += i) {
            med[i] -= med[j];
            if (med[i] < 0) med[i] += mod-1;
            e += alz[j];
        }
        med[i] += lt[e];
        if (med[i] >= mod-1) med[i] -= mod-1;
 
        int b = med[i];
        int j = 0;
        while (b) {
            if (b & 1) ans = mul(ans, ms[i][j]);
            j++; b >>= 1;
        }
    }
 
    printf("%d\n", ans);
 
    for (int i = 1; i <= n; i++) alz[a[i]] = 0;
}
 
int main() {
    lt[0] = 1;
    for (int i = 1; i <= MM; i++) {
        lt[i] = LT(lt[i-1]) * 2 % (mod-1);
        lt[i-1]--;
        if (lt[i-1] < 0) lt[i-1] += (mod-1);
        ms[i][0] = i;
        for (int j = 1; j <= 30; j++) ms[i][j] = mul(ms[i][j-1], ms[i][j-1]);
    }
    lt[MM]--; if (lt[MM] < 0) lt[MM] += (mod-1);
 
    int ct;
    scanf("%d", &ct);
    for (int i = 1; i <= ct; i++) {
        solution(i);
    }
} 

