public class UberPool {

	
	public static void main(String[] args) {
		

	}

	
	int UP(int[] A, int[] B, int[] C, int[] X, int[] Y) {
		int f = Math.abs(A[0] - B[0]) + Math.abs(A[1] - B[1]);
		int sd = Math.abs(C[0] - A[0]) + Math.abs(C[1] - A[1]);
		int qd = Math.abs(X[0] - C[0]) + Math.abs(X[1] - C[1])
				+ Math.abs(X[0] - B[0]) + Math.abs(X[1] - B[1]);
		int ad = Math.abs(Y[0] - C[0]) + Math.abs(Y[1] - C[1])
				+ Math.abs(Y[0] - B[0]) + Math.abs(Y[1] - B[1]);

		if (qd <= ad && qd > f && ad > f)
			return 1;
		else if (qd > ad && qd > f && ad > f)
			return 2;
		else
			return -1;
	}

	
	boolean rbq(String seq) {

		int b = 0;
		for (int i = 0; i < seq.length(); i++) {
			if (seq.charAt(i) == '(') {
				b++;
			} else {
				b--;
			}
			if (b < 0) {
				return false;
			}
		}
		if (b != 0) {
			return false;
		}
		return true;
	}

	
	int mes(int[][] matrix) {

		int r = 0;
		for (int i = 0; i < matrix[0].length; i++) {
			for (int j = 0; j < matrix.length; j++) {
				if (matrix[j][i] == 0) {
					break;
				}
				r += matrix[j][i];
			}
		}

		return r;
	}

	
	boolean bg(int[] g) {

		int a = 0;
		for (int i = 0; i < g.length; i++) {
			a += g[i];
		}
		if (a == 0) {
			return false;
		}

		return a % g.length == 0 ? true : false;
	}
}